<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://yancechen.github.io</id>
    <title>陈有余</title>
    <updated>2020-09-30T03:21:42.820Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://yancechen.github.io"/>
    <link rel="self" href="https://yancechen.github.io/atom.xml"/>
    <subtitle>万物之中，希望至美</subtitle>
    <logo>https://yancechen.github.io/images/avatar.png</logo>
    <icon>https://yancechen.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, 陈有余</rights>
    <entry>
        <title type="html"><![CDATA[Jetpack 之 LifeCycle 组件原理解析]]></title>
        <id>https://yancechen.github.io/post/jetpack-zhi-lifecycle-zu-jian-yuan-li-jie-xi/</id>
        <link href="https://yancechen.github.io/post/jetpack-zhi-lifecycle-zu-jian-yuan-li-jie-xi/">
        </link>
        <updated>2020-09-28T07:40:17.000Z</updated>
        <content type="html"><![CDATA[<p>对于 LifeCycle 组件还不了解的同学，可以先阅读这篇文章：</p>
<p><a href="https://yancechen.github.io/post/jetpack-zhi-lifecycle-zu-jian-shi-yong-xiang-jie/">Jetpack 之 LifeCycle 组件使用详解</a></p>
<h1 id="学习问题">学习问题</h1>
<ol>
<li>
<p>LifeCycle 是如何监听到 Activity/Fragment 生命周期变化的？</p>
</li>
<li>
<p>LifeCycle 如何将生命周期变化的事件分发给观察者的？</p>
</li>
</ol>
<h1 id="本文目录">本文目录</h1>
<figure data-type="image" tabindex="1"><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a41387880625432da98b49f670c42977~tplv-k3u1fbpfcp-zoom-1.image" alt="" loading="lazy"></figure>
<h1 id="一-四个重要的类">一、四个重要的类</h1>
<h2 id="一lifecycle">（一）Lifecycle</h2>
<p>Lifecycle 是一个抽象类。它内部定义了两个枚举：<code>Event</code> 需要分发的事件的类型，<code>State</code> 宿主的状态。</p>
<h3 id="1event">1.Event</h3>
<pre><code class="language-java">public enum Event {
    //对应于宿主（实现了LifecycleOwner的类）的 onCreate 方法
    ON_CREATE,
        
    //对应于宿主（实现了LifecycleOwner的类）的 onStart 方法
    ON_START,
        
    //对应于宿主（实现了LifecycleOwner的类）的 onResume 方法
    ON_RESUME,
        
    //对应于宿主（实现了LifecycleOwner的类）的 onPause 方法
    ON_PAUSE,
        
    //对应于宿主（实现了LifecycleOwner的类）的 onStop 方法
    ON_STOP,
        
    //对应于宿主（实现了LifecycleOwner的类）的 onDestroy 方法
    ON_DESTROY,
        
    //可以匹配宿主的所有生命周期事件
    ON_ANY
}
</code></pre>
<p>各个生命周期事件分发的时机：</p>
<p>ON_CREATE、ON_START 和 ON_RESUME：这三个生命周期事件是在宿主相应的生命周期方法 <strong>执行完成之后</strong> 被分发。</p>
<p>ON_PAUSE、ON_STOP 和 ON_DESTROY：这三个生命周期事件是在宿主相应的生命周期方法 <strong>被调用之前</strong> 分发。</p>
<h3 id="2state">2.State</h3>
<pre><code class="language-java">public enum State {

    //已销毁状态。以 Activity 为例，在回调 Activity 的 onDestroy 方法之前，宿主会达到此状态。
    DESTROYED,

    //已初始化状态。在回调 onCreate 方法之前的一种状态。
    INITIALIZED,

    //已创建状态。两种情况下回处于这种状态：
    //1.宿主的 onCreate 方法执行之后
    //2.宿主的 onStop 方法调用之前
    CREATED,

    //可见状态。两种情况下回处于这种状态：
    //1.宿主的 onStart 方法执行之后
    //2.宿主的 onPause 方法调用之前
    STARTED,

    //聚焦（可交互状态）。宿主执行了 onResume 方法后处于该状态。
    RESUMED;

    public boolean isAtLeast(@NonNull State state) {
        return compareTo(state) &gt;= 0;
    }
}
</code></pre>
<h3 id="3event-和-state-的对应关系">3.Event 和 State 的对应关系</h3>
<figure data-type="image" tabindex="2"><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e3197f4aeafd454b8468ab2a19bf1ddf~tplv-k3u1fbpfcp-zoom-1.image" alt="" loading="lazy"></figure>
<h2 id="二lifecycleregistry">（二）LifecycleRegistry</h2>
<p>它是 Lifecycle 的唯一实现类。主要用来注册观察者（LifecycleObserver），以及分发宿主状态给它们（可以处理多个观察者）。</p>
<h2 id="三lifecycleowner">（三）LifecycleOwner</h2>
<p>用来声明它是一个能够提供生命周期事件的宿主，Activity/Fragment 都实现了该接口。内部只有一个 getLifecycle 方法。</p>
<pre><code class="language-java">public interface LifecycleOwner {
    @NonNull
    Lifecycle getLifecycle();
}
</code></pre>
<h2 id="四lifecycleobserver">（四）LifecycleObserver</h2>
<p>用来定义观察者。</p>
<h1 id="二-四个类之间的关系">二、四个类之间的关系</h1>
<figure data-type="image" tabindex="3"><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3a5a6363bad64e6a8e647018e2fc438d~tplv-k3u1fbpfcp-zoom-1.image" alt="LifeCycle 类关系图" loading="lazy"></figure>
<p>说明：</p>
<ol>
<li>Activity/Fragment 都默认实现了 LifecycleOwner 接口；</li>
<li>LifecycleRegistry 是 Lifecycle 唯一的实现类；</li>
<li>实现观察者（Observer）有三种方式：
<ul>
<li>LifecycleObserver 配合 @OnLifecycleEvent 注解</li>
<li>DefaultLifecycleObserver 拥有宿主所有生命周期事件</li>
<li>LifecycleEventObserver 将宿主生命周期事件封装成 Lifecycle.Event</li>
</ul>
</li>
<li>在 Activity/Fragment 中通过 <code>getLifecycle()</code> 方法获取到一个 LifecycleRegistry 对象；</li>
<li>通过调用 LifecycleRegistry 对象的 <code>addObserver()</code> 添加一个观察者（该观察者通过三种方式实现都可以）。</li>
</ol>
<h1 id="三-fragment-如何实现-lifycycle">三、Fragment 如何实现 LifyCycle</h1>
<p>在 Fragment 各个生命周期方法内部会利用 LifecycleRegistry 进行相应的事件分发。</p>
<pre><code class="language-java">public class Fragment implements LifecycleOwner {

    LifecycleRegistry mLifecycleRegistry;

    void performCreate(Bundle savedInstanceState) {
        onCreate(savedInstanceState);
        //ON_CREATE 事件在执行了 onCreate 方法之后分发 
        mLifecycleRegistry.handleLifecycleEvent(Lifecycle.Event.ON_CREATE);
    }

    void performStart() {
        onStart();
        //ON_START 事件在执行了 onStart 方法之后分发
        mLifecycleRegistry.handleLifecycleEvent(Lifecycle.Event.ON_START);
    }

    void performResume() {
        onResume();
        //ON_RESUME 事件在执行了 onResume 方法之后分发
        mLifecycleRegistry.handleLifecycleEvent(Lifecycle.Event.ON_RESUME);
    }

    void performPause() {
        //ON_PAUSE 事件在执行 onPause 方法执行之前分发
        mLifecycleRegistry.handleLifecycleEvent(Lifecycle.Event.ON_PAUSE);
        onPause();
    }

    void performStop() {
        //ON_STOP 事件在执行 onStop 方法执行之前分发
        mLifecycleRegistry.handleLifecycleEvent(Lifecycle.Event.ON_STOP);
        onStop();
    }

    void performDestroy() {
        //ON_DESTROY 事件在执行 onDestroy 方法执行之前分发
        mLifecycleRegistry.handleLifecycleEvent(Lifecycle.Event.ON_DESTROY);
        onDestroy();
    }
}
</code></pre>
<h1 id="四-activity-如何实现-lifycycle">四、Activity 如何实现 LifyCycle</h1>
<p>Activity 实现 Lifecycle 需要借助于 ReportFragment 往 Activity 上添加一个 fragment。ReportFragment 没有任何的页面，它只负责在生命周期变化时利用 LifecycleRegistry 进行相应事件的分发。</p>
<p>之所以需要借助 ReportFragment ，目的是为了兼顾不是继承自 AppCompactActivity 的场景， 同时也支持我们自定义 LifecycleOwner 的场景。</p>
<h2 id="一componentactivity-的源码分析">（一）ComponentActivity 的源码分析</h2>
<p>以下是 ComponentActivity 的源码，在 onCreate 方法中往 Activity 里面添加了一个 fragment。</p>
<pre><code class="language-java">public class ComponentActivity extends Activity implements LifecycleOwner {
  
    private LifecycleRegistry mLifecycleRegistry = new LifecycleRegistry(this);

    @SuppressLint(&quot;RestrictedApi&quot;)
    @Override
    protected void onCreate(@Nullable Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        //添加一个 fragment
        ReportFragment.injectIfNeededIn(this);
    }
}
</code></pre>
<p>补充一下 Activity 的继承关系：</p>
<figure data-type="image" tabindex="4"><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3d8a4d3ed71c412e9e595ed256fbb96a~tplv-k3u1fbpfcp-zoom-1.image" alt="" loading="lazy"></figure>
<h2 id="二reportfragment-的源码分析">（二）ReportFragment 的源码分析</h2>
<p>下面来看看 ReportFragment 的源码。在 ReportFragment 中最主要的一个方法是 injectIfNeededIn。</p>
<pre><code class="language-java">public class ReportFragment extends Fragment {
    
    ...

    public static void injectIfNeededIn(Activity activity) {
        //1.如果 API &gt;= 29 ,注册 ActivityLifecycleCallbacks
        if (Build.VERSION.SDK_INT &gt;= 29) {
            activity.registerActivityLifecycleCallbacks(
                    new LifecycleCallbacks());
        }

        //2.添加一个 ReportFragment 到 Activity 中
        android.app.FragmentManager manager = activity.getFragmentManager();
        if (manager.findFragmentByTag(REPORT_FRAGMENT_TAG) == null) {
            manager.beginTransaction().add(new ReportFragment(), REPORT_FRAGMENT_TAG).commit();
            manager.executePendingTransactions();
        }
    }

    ...
</code></pre>
<p>injectIfNeededIn 方法会做两件事情：</p>
<h3 id="1判断当前的-api-level根据-api-level-选择监听-activity-生命周期的时机和方式">1.判断当前的 API Level，根据 API Level 选择监听 Activity 生命周期的时机和方式</h3>
<h4 id="1api-level-29">（1）API Level &gt;= 29</h4>
<p>如果大于等于 29 的话，会注册一个 ActivityLifecycleCallbacks，</p>
<pre><code class="language-java">if (Build.VERSION.SDK_INT &gt;= 29) {
    activity.registerActivityLifecycleCallbacks(new LifecycleCallbacks());
}
</code></pre>
<p>ActivityLifecycleCallbacks 是 Application 的一个内部接口。</p>
<pre><code class="language-java">public interface ActivityLifecycleCallbacks {
        void onActivityCreated(@NonNull Activity activity, @Nullable Bundle savedInstanceState);
        void onActivityStarted(@NonNull Activity activity);
        void onActivityResumed(@NonNull Activity activity);
        void onActivityPaused(@NonNull Activity activity);
        void onActivityStopped(@NonNull Activity activity);
        void onActivityDestroyed(@NonNull Activity activity);
    }
</code></pre>
<p>以 Activity 的 onResume() 生命周期为例，如果我们注册了 ActivityLifecycleCallbacks，Android 系统会先回调 ActivityLifecycleCallbacks 的 onActivityResumed 方法，然后才执行 Android 本身的 onResume() 方法。</p>
<p>利用这个特点，我们可以注册一个自定义的 ActivityLifecycleCallbacks，在自定义的 ActivityLifecycleCallbacks 添加分发生命周期事件的逻辑来通知观察者：</p>
<pre><code class="language-java">public class ReportFragment extends Fragment {

    public static void injectIfNeededIn(Activity activity) {
        if (Build.VERSION.SDK_INT &gt;= 29) {
            activity.registerActivityLifecycleCallbacks(
                    new LifecycleCallbacks());
        }
        
        android.app.FragmentManager manager = activity.getFragmentManager();
        if (manager.findFragmentByTag(REPORT_FRAGMENT_TAG) == null) {
            manager.beginTransaction().add(new ReportFragment(), REPORT_FRAGMENT_TAG).commit();
            manager.executePendingTransactions();
        }
    }

    @SuppressWarnings(&quot;deprecation&quot;)
    static void dispatch(@NonNull Activity activity, @NonNull Lifecycle.Event event) {
        ...

        if (activity instanceof LifecycleOwner) {
            Lifecycle lifecycle = ((LifecycleOwner) activity).getLifecycle();
            if (lifecycle instanceof LifecycleRegistry) {
                //最终还是通过 LifecycleRegistry 来处理事件的分发
                ((LifecycleRegistry) lifecycle).handleLifecycleEvent(event);
            }
        }
    }

    //自定义 ActivityLifecycleCallbacks 来处理生命周期事件的分发，通知观察者
    static class LifecycleCallbacks implements Application.ActivityLifecycleCallbacks {
        
        ...

        @Override
        public void onActivityPostCreated(@NonNull Activity activity,
                @Nullable Bundle savedInstanceState) {
            //分发 ON_CREATE 事件
            dispatch(activity, Lifecycle.Event.ON_CREATE);
        }

        @Override
        public void onActivityPostStarted(@NonNull Activity activity) {
            //分发 ON_START 事件
            dispatch(activity, Lifecycle.Event.ON_START);
        }

        @Override
        public void onActivityPostResumed(@NonNull Activity activity) {
            //分发 ON_RESUME 事件
            dispatch(activity, Lifecycle.Event.ON_RESUME);
        }

        @Override
        public void onActivityPrePaused(@NonNull Activity activity) {
            //分发 ON_PAUSE 事件
            dispatch(activity, Lifecycle.Event.ON_PAUSE);
        }

        @Override
        public void onActivityPreStopped(@NonNull Activity activity) {
            //分发 ON_STOP 事件
            dispatch(activity, Lifecycle.Event.ON_STOP);
        }

        @Override
        public void onActivityPreDestroyed(@NonNull Activity activity) {
            //分发 ON_DESTROY 事件
            dispatch(activity, Lifecycle.Event.ON_DESTROY);
        }

        ...

    }
}
</code></pre>
<h4 id="2api-level-29">（2）API Level &lt; 29</h4>
<p>对于 API 小于 29 的情况，它的实现方式和 Fragment 的实现是一样的，在各个生命周期方法内利用 LifecycleRegistry 分发相应的 Lifecycle.Event 事件给每个观察者：</p>
<pre><code class="language-java">public class ReportFragment extends Fragment {

    public static void injectIfNeededIn(Activity activity) {
        if (Build.VERSION.SDK_INT &gt;= 29) {
            activity.registerActivityLifecycleCallbacks(
                    new LifecycleCallbacks());
        }
        
        android.app.FragmentManager manager = activity.getFragmentManager();
        if (manager.findFragmentByTag(REPORT_FRAGMENT_TAG) == null) {
            manager.beginTransaction().add(new ReportFragment(), REPORT_FRAGMENT_TAG).commit();
            manager.executePendingTransactions();
        }
    }

    @Override
    public void onActivityCreated(Bundle savedInstanceState) {
        super.onActivityCreated(savedInstanceState);
        dispatch(Lifecycle.Event.ON_CREATE);
    }

    @Override
    public void onStart() {
        super.onStart();
        dispatch(Lifecycle.Event.ON_START);
    }

    @Override
    public void onResume() {
        super.onResume();
        dispatch(Lifecycle.Event.ON_RESUME);
    }

    @Override
    public void onPause() {
        super.onPause();
        dispatch(Lifecycle.Event.ON_PAUSE);
    }

    @Override
    public void onStop() {
        super.onStop();
        dispatch(Lifecycle.Event.ON_STOP);
    }

    @Override
    public void onDestroy() {
        super.onDestroy();
        dispatch(Lifecycle.Event.ON_DESTROY);
    }

    private void dispatch(@NonNull Lifecycle.Event event) {
        //在此处判断一下 API ，避免重复分发事件
        if (Build.VERSION.SDK_INT &lt; 29) {
            dispatch(getActivity(), event);
        }
    }
}
</code></pre>
<h3 id="2在-injectifneededin-中会创建一个-reportfragment-添加到-activity-中">2.在 injectIfNeededIn 中会创建一个 ReportFragment 添加到 Activity 中</h3>
<pre><code class="language-java">public class ReportFragment extends Fragment {
    
    public static void injectIfNeededIn(Activity activity) {

        ...

        //往 Activity 中添加一个 ReportFragment
        android.app.FragmentManager manager = activity.getFragmentManager();
        if (manager.findFragmentByTag(REPORT_FRAGMENT_TAG) == null) {
            manager.beginTransaction().add(new ReportFragment(), REPORT_FRAGMENT_TAG).commit();
            manager.executePendingTransactions();
        }
    }
}
</code></pre>
<h1 id="五-lifecycleregistry-源码分析">五、LifecycleRegistry 源码分析</h1>
<p>从前文的分析中，我们知道了 Activity/Fragment 是如何去实现 LifeCycle 的，对于生命周期事件的分发，它们最终都是交给了 LifecycleRegistry 去处理，因此，我们有比较去了解一下 LifecycleRegistry 内部的工作机制。</p>
<h2 id="一addobserver-源码分析">（一）addObserver() 源码分析</h2>
<p>LifeCycle 是通过观察者模式去实现的，添加一个观察者的方式是调用 addObserver() 方法：</p>
<pre><code class="language-java">getLifecycle().addObserver(observer);
</code></pre>
<p>先来看一下完整的 addObserver() 方法：</p>
<pre><code class="language-java">public void addObserver(@NonNull LifecycleObserver observer) {
        State initialState = mState == DESTROYED ? DESTROYED : INITIALIZED;
        ObserverWithState statefulObserver = new ObserverWithState(observer, initialState);
        ObserverWithState previous = mObserverMap.putIfAbsent(observer, statefulObserver);

        if (previous != null) {
            return;
        }
        LifecycleOwner lifecycleOwner = mLifecycleOwner.get();
        if (lifecycleOwner == null) {
            // it is null we should be destroyed. Fallback quickly
            return;
        }

        boolean isReentrance = mAddingObserverCounter != 0 || mHandlingEvent;
        State targetState = calculateTargetState(observer);
        mAddingObserverCounter++;
        while ((statefulObserver.mState.compareTo(targetState) &lt; 0
                &amp;&amp; mObserverMap.contains(observer))) {
            pushParentState(statefulObserver.mState);
            statefulObserver.dispatchEvent(lifecycleOwner, upEvent(statefulObserver.mState));
            popParentState();
            // mState / subling may have been changed recalculate
            targetState = calculateTargetState(observer);
        }

        if (!isReentrance) {
            // we do sync only on the top level.
            sync();
        }
        mAddingObserverCounter--;
    }
</code></pre>
<p>下面，我们逐行代码来分析：</p>
<h3 id="1首先确定新添加的-observer-的初始化状态">1.首先确定新添加的 Observer 的初始化状态</h3>
<pre><code class="language-java">State initialState = mState == DESTROYED ? DESTROYED : INITIALIZED;
</code></pre>
<p>只要当前宿主的状态不是 <code>DESTROYED</code>，那么它的初始状态都是 <code>INITIALIZED</code>。</p>
<h3 id="2将-observer-包装成-observerwithstate">2.将 Observer 包装成 ObserverWithState</h3>
<pre><code class="language-java">ObserverWithState statefulObserver = new ObserverWithState(observer, initialState);
</code></pre>
<p>ObserverWithState 表示带有状态的 Observer，这个类后文会详细分析。</p>
<h3 id="3将-observer-添加到集合中">3.将 Observer 添加到集合中</h3>
<pre><code class="language-java">ObserverWithState previous = mObserverMap.putIfAbsent(observer, statefulObserver);

if (previous != null) {
    return;
}
</code></pre>
<p>通过 putIfAbsent() 方法将 ObserverWithState 添加到集合中，如果之前已经添加过了，putIfAbsent() 方法会直接返回之前添加过的 ObserverWithState，此时，程序会直接 return。</p>
<h3 id="4利用一个-while-循环将观察者和宿主的状态进行对齐">4.利用一个 while 循环将观察者和宿主的状态进行对齐</h3>
<pre><code class="language-java">//首先计算出观察者应该达到的状态
State targetState = calculateTargetState(observer);
//通过 compareTo 方法，将观察者的状态和宿主当前状态做比较，如果小于0，说明两者状态还没有对齐
while ((statefulObserver.mState.compareTo(targetState) &lt; 0
        &amp;&amp; mObserverMap.contains(observer))) {
    pushParentState(statefulObserver.mState);
    //执行一次事件分发
    statefulObserver.dispatchEvent(lifecycleOwner, upEvent(statefulObserver.mState));
    popParentState();
    //计算观察者下一个应该到达的状态，在下次循环中观察者状态还会与之对比，直到状态对齐，退出循环
    targetState = calculateTargetState(observer);
}
</code></pre>
<p>根据 while 循环的逻辑，我们可以得出一个结论：</p>
<p>在 Activity/Fragment 的任意生命周期方法内注册观察者都能接收到完整的生命周期事件。</p>
<p>比如，我们在 onResume() 方法内注册观察者：</p>
<ul>
<li>while 第一次循环：分发 on_Create 事件，观察者状态 INITIALIZED -&gt; CREATED</li>
<li>while 第二次循环：分发 on_Start 事件，观察者状态 CREATED -&gt; STARTED</li>
<li>while 第三次循环：分发 on_Resume 事件，观察者状态 STARTED -&gt; RESUMED</li>
</ul>
<p>不过，建议最好是在 onCreate 方法中进行注册。</p>
<p>关于使用 compareTo 比较两个枚举值，请参考文章：</p>
<p><a href="https://www.w3cschool.cn/java/java-enum-compare.html">Java 枚举比较</a></p>
<h2 id="二handlelifecycleevent-源码分析">（二）handleLifecycleEvent() 源码分析</h2>
<p>handleLifecycleEvent() 方法主要是负责宿主生命周期变化后相应的事件分发。</p>
<pre><code class="language-java">public void handleLifecycleEvent(@NonNull Lifecycle.Event event) {
        State next = getStateAfter(event);
        moveToState(next);
    }
</code></pre>
<h3 id="1首先根据需要分发的事件获取宿主当前处于什么状态">1.首先根据需要分发的事件，获取宿主当前处于什么状态</h3>
<p>假设分发的是 <code>ON_START</code> 事件，那么根据 getStateAfter() 方法我们可以知道，宿主当前是处于 <code>STARTED</code> 状态。</p>
<pre><code>static State getStateAfter(Event event) {
        switch (event) {
            case ON_CREATE:
            case ON_STOP:
                return CREATED;
            case ON_START:
            case ON_PAUSE:
                return STARTED;
            case ON_RESUME:
                return RESUMED;
            case ON_DESTROY:
                return DESTROYED;
            case ON_ANY:
                break;
        }
</code></pre>
<h3 id="2根据第一步获取的宿主状态设置当前的状态并通知观察者">2.根据第一步获取的宿主状态设置当前的状态并通知观察者</h3>
<pre><code class="language-java">private void moveToState(State next) {
        if (mState == next) {
            return;
        }
        //设置当前状态
        mState = next;

        ...

        //通知观察者
        sync();
    }
</code></pre>
<p>下面来看一下 sync 方法：</p>
<pre><code class="language-java">private void sync() {
        
    while (!isSynced()) {
    
        //如果宿主当前的状态 小于 mObserverMap 集合中最先添加的那个观察者的状态
        //则说明宿主可能发生了状态回退，比如当前是 RESUMED 状态，执行了onPause 则回退到STARTED 状态
        //此时调用 backwardPass 给集合中的每个一观察者分发一个 on_pause 事件，并同步它的状态。
        if (mState.compareTo(mObserverMap.eldest().getValue().mState) &lt; 0) {
            backwardPass(lifecycleOwner);
        }

        //如果宿主当前状态 大于 mObserverMap 集合中最先添加的那个观察者的状态
        //则说明宿主可能发生了状态前进，比如当前是 STARTED 状态，执行了onResume 则前进到RESUMED 状态
        //此时调用 forwardPass 给集合中的每个一观察者分发一个 on_resume 事件，并同步它的状态。
        Entry&lt;LifecycleObserver, ObserverWithState&gt; newest = mObserverMap.newest();
        if (!mNewEventOccurred &amp;&amp; newest != null
                &amp;&amp; mState.compareTo(newest.getValue().mState) &gt; 0) {
            forwardPass(lifecycleOwner);
        }
    }
    mNewEventOccurred = false;
}
</code></pre>
<h2 id="三observerwithstate-源码分析">（三）ObserverWithState 源码分析</h2>
<p>ObserverWithState 是 LifecycleRegistry 中持有观察者及其状态的内部类。</p>
<pre><code class="language-java">static class ObserverWithState {
    State mState;
    LifecycleEventObserver mLifecycleObserver;

    //把传入的 LifecycleObserver 适配成 LifecycleEventObserver，目的是为了统一事件的分发形式。
    //在之前的文章里介绍过实现观察者有三种形式，每一种接收的事件类型都不一样，如果在分发的时候不统一事件分发的形式，将会变得很麻烦
    ObserverWithState(LifecycleObserver observer, State initialState) {
        mLifecycleObserver = Lifecycling.lifecycleEventObserver(observer);
        mState = initialState;
    }

    void dispatchEvent(LifecycleOwner owner, Event event) {
        State newState = getStateAfter(event);
        mState = min(mState, newState);
        //执行事件分发
        mLifecycleObserver.onStateChanged(owner, event);
        mState = newState;
    }
}
</code></pre>
<h1 id="六-参考资料">六、参考资料</h1>
<p><a href="https://developer.android.google.cn/jetpack">Google Jetpack 官方文档</a></p>
<p><a href="https://www.imooc.com/u/index/read">慕课专栏：跟架构师学Jetpack</a></p>
<p>《Android Jetpack 应用指南》叶坤</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Jetpack 之 LifeCycle 组件使用详解]]></title>
        <id>https://yancechen.github.io/post/jetpack-zhi-lifecycle-zu-jian-shi-yong-xiang-jie/</id>
        <link href="https://yancechen.github.io/post/jetpack-zhi-lifecycle-zu-jian-shi-yong-xiang-jie/">
        </link>
        <updated>2020-09-16T04:56:29.000Z</updated>
        <content type="html"><![CDATA[<h1 id="一-lifecycle-简介">一、LifeCycle 简介</h1>
<p>LifeCycle 是一个可以感知宿主生命周期变化的组件。常见的宿主包括 Activity/Fragment、Service 和 Application。LifeCycle 会持有宿主的生命周期状态的信息，当宿主生命周期发生变化时，会通知监听宿主的观察者。</p>
<p><strong>LifeCycle 的出现主要是为了解决：</strong> 系统组件的生命周期与普通组件之间的耦合性。</p>
<ul>
<li>系统组件指：Activity/Fragment、Service 和 Application。</li>
<li>普通组件指：将代码按照功能或者作用封装成的组件。</li>
</ul>
<figure data-type="image" tabindex="1"><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/fd01ec517e5f4438bc618649435fe90f~tplv-k3u1fbpfcp-zoom-1.image" alt="LifeCycle 的原理" loading="lazy"></figure>
<p>哪些情况下，系统组件的生命周期会和普通组件的生命周期耦合在一起呢？</p>
<p><strong>举个栗子：</strong></p>
<p>在 58 部落业务中有视频播放的业务需求。我们需要在 Activity 中对视频播放组件进行初始化，在 onPause() 方法中停止视频的播放，在 onDestroy() 方法中对视频播放组件以及一些资源进行回收。这样的做法非常繁琐，会让页面与组件之间的耦合度变高。</p>
<p>对于这类问题，完全可以使用 LifeCycle 来解决。<strong>它不仅降低了模块之间的耦合度，还降低了内存泄露发生的可能性</strong>。</p>
<h1 id="二-lifecycle-的使用">二、LifeCycle 的使用</h1>
<p>Jetpack 为我们提供了两个接口：</p>
<p>被观察者：<code>LifecycleOwner</code></p>
<p>观察者：<code>LifecycleObserver</code></p>
<p>被监听的系统组件需要去实现 LifecycleOwner 接口，观察者需要实现 LifecycleObserver 接口。</p>
<h2 id="一使用场景1使用-lifecycle-解耦页面与组件">（一）使用场景1：使用 LifeCycle 解耦页面与组件</h2>
<h3 id="1解耦-activity">（1）解耦 Activity</h3>
<h4 id="第一步添加依赖">第一步：添加依赖</h4>
<pre><code class="language-groovy">implementation 'androidx.appcompat:appcompat:1.2.0'
</code></pre>
<p>在 AndroidX 里面 ComponentActivity 已经默认实现了 LifecycleOwner 接口。如果项目没有迁移到 AndroidX，还是用的 Support 库，新版本的 SDK 也通过 SupportActivity 实现了 LifecycleOwner 接口。</p>
<figure data-type="image" tabindex="2"><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6997c541919b4c61b6fd5c0a26c985e2~tplv-k3u1fbpfcp-zoom-1.image" alt="" loading="lazy"></figure>
<p>在 LifecycleOwner 接口中，只有一个 getLifecycle 方法。</p>
<h4 id="第二步实现观察者">第二步：实现观察者</h4>
<p>如果是想监听某个 Activity 的生命周期，需要我们做的就是自定义组件，实现 LifecycleObserver 接口即可，该接口没有接口方法，不需要任何具体的实现。</p>
<p>比如以刚刚的视频播放为例：</p>
<ol>
<li>创建一个 MyVideoPlayListener 类，实现 LifecycleObserver 接口，与视频播放相关的逻辑全在这个类里面完成。对于组件里面需要在 Activity 生命周期变化时得到通知的方法，用 @OnLifecycleEvent(Lifecycle.Event.ON_XXX) 注解进行标记，这样当 Activity 生命周期发生变化时，被标记过的方法便会被自动调用。</li>
</ol>
<pre><code class="language-java">public class MyVideoPlayListener implements LifecycleObserver {
    private static String TAG = &quot;MyVideoPlayListener&quot;;

    @OnLifecycleEvent(Lifecycle.Event.ON_CREATE)
    private void initVideo(){
        Log.d(TAG,&quot;initVideo&quot;);
    }

    @OnLifecycleEvent(Lifecycle.Event.ON_RESUME)
    private void startPlay(){
        Log.d(TAG,&quot;startPlay&quot;);
    }

    @OnLifecycleEvent(Lifecycle.Event.ON_PAUSE)
    private void pausePlay(){
        Log.d(TAG,&quot;pausePlay&quot;);
    }
}
</code></pre>
<p>2.在 MainActivity 中对 MyVideoPlayListener 进行引用即可。</p>
<pre><code class="language-java">public class MainActivity extends AppCompatActivity {

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        MyVideoPlayListener listener = new MyVideoPlayListener();
        getLifecycle().addObserver(listener);
    }
}
</code></pre>
<h3 id="2解耦-fragment">（2）解耦 Fragment</h3>
<p>在新版的 SDK 中，Fragment 同样也默认实现了 LifecycleOwner 接口，因此，以上的例子同样适合于 Fragment。</p>
<h2 id="二使用场景2使用-lifecycleservice-解耦-service-与组件">（二）使用场景2：使用 LifecycleService 解耦 Service 与组件</h2>
<h3 id="1lifecycleservice-基本介绍">（1）LifecycleService 基本介绍</h3>
<p>Android 中拥有生命周期的组件除了 Activity/Fragment ，还有一个非常重要的组件就是 Service。LifecycleService 就是用来监听和解耦 Service 组件的。</p>
<pre><code class="language-java">public class LifecycleService extends Service implements LifecycleOwner {

    private final ServiceLifecycleDispatcher mDispatcher = new ServiceLifecycleDispatcher(this);

    ......

    @Override
    @NonNull
    public Lifecycle getLifecycle() {
        return mDispatcher.getLifecycle();
    }
}
</code></pre>
<h3 id="2具体使用方法">（2）具体使用方法</h3>
<h4 id="第一步添加相关依赖">第一步：添加相关依赖</h4>
<pre><code class="language-groovy">implementation &quot;androidx.lifecycle:lifecycle-service:2.2.0&quot;
</code></pre>
<h4 id="第二步创建-myserviceobserver-类实现-lifecycleobserver-接口-使用-onlifecycleevent-标记希望在-server-生命周期发生变化时得到同步调用的方法">第二步：创建 MyServiceObserver 类，实现 LifecycleObserver 接口。使用 @OnLifecycleEvent 标记希望在 Server 生命周期发生变化时得到同步调用的方法。</h4>
<pre><code class="language-java">public class MyServiceObserver implements LifecycleObserver {
    private static String TAG = &quot;MyServiceObserver&quot;;

    @OnLifecycleEvent(Lifecycle.Event.ON_CREATE)
    private void initVideo(){
        Log.d(TAG,&quot;initVideo&quot;);
    }

    @OnLifecycleEvent(Lifecycle.Event.ON_DESTROY)
    private void pausePlay(){
        Log.d(TAG,&quot;stopPlay&quot;);
    }
}
</code></pre>
<h4 id="第三步创建一个-myservice-的类继承-lifecycleservice-由于-lifecycleservice-是-service-的直接子类所以使用起来与普通的-service-没有差别">第三步：创建一个 MyService 的类，继承 LifecycleService。由于 LifecycleService 是 Service 的直接子类，所以使用起来与普通的 Service 没有差别。</h4>
<pre><code class="language-java">public class MyService extends LifecycleService {
    private MyServiceObserver myServiceObserver;
    
    public MyService(){
        myServiceObserver = new MyServiceObserver();
        getLifecycle().addObserver(myServiceObserver);
    }
}
</code></pre>
<h2 id="三使用场景3使用-processlifecycleowner-监听应用程序的生命周期">（三）使用场景3：使用 ProcessLifecycleOwner 监听应用程序的生命周期</h2>
<p>具有生命周期的组件除了 Activity、Fragment 和 Service 外，还有 Application。ProcessLifecycleOwner 就是用来监听整个应用程序的生命周期情况。</p>
<p>具体使用方法：</p>
<h4 id="第一步添加依赖项">第一步：添加依赖项</h4>
<pre><code class="language-groovy">implementation &quot;androidx.lifecycle:lifecycle-process:2.2.0&quot;
</code></pre>
<h4 id="第二步定义一个-applicationobserver实现-lifecycleobserver-接口">第二步：定义一个 ApplicationObserver，实现 LifecycleObserver 接口。</h4>
<pre><code class="language-java">public class ApplicationObserver implements LifecycleObserver {
    private String TAG = this.getClass().getName();

    /**
     * 在应用程序的整个生命周期中只会被调用一次
     */
    @OnLifecycleEvent(Lifecycle.Event.ON_CREATE)
    public void onCreate() {
        Log.d(TAG,&quot;Lifecycle.Event.ON_CREATE&quot;);
    }

    @OnLifecycleEvent(Lifecycle.Event.ON_START)
    public void onStart() {
        Log.d(TAG,&quot;Lifecycle.Event.ON_START&quot;);
    }

    @OnLifecycleEvent(Lifecycle.Event.ON_RESUME)
    public void onResume() {
        Log.d(TAG,&quot;Lifecycle.Event.ON_RESUME&quot;);
    }

    @OnLifecycleEvent(Lifecycle.Event.ON_PAUSE)
    public void onPause() {
        Log.d(TAG,&quot;Lifecycle.Event.ON_PAUSE&quot;);
    }

    @OnLifecycleEvent(Lifecycle.Event.ON_STOP)
    public void onStop() {
        Log.d(TAG,&quot;Lifecycle.Event.ON_STOP&quot;);
    }

    /**
     * 永远不会被调用，系统不会分发调用 ON_DESTROY 事件
     */
    @OnLifecycleEvent(Lifecycle.Event.ON_DESTROY)
    public void onDestroy() {
        Log.d(TAG,&quot;Lifecycle.Event.ON_DESTROY&quot;);
    }
}
</code></pre>
<h4 id="第三步在-application-中关联-applicationobserver">第三步：在 Application 中关联 ApplicationObserver。</h4>
<pre><code class="language-java">public class App extends Application {
    @Override
    public void onCreate() {
        super.onCreate();
        ProcessLifecycleOwner.get().getLifecycle().addObserver(new ApplicationObserver());
    }
}
</code></pre>
<p><strong>注意事项：</strong></p>
<ol>
<li>ProcessLifecycleOwner 是针对整个应用程序的监听，与 Activity 的数量无关。</li>
<li>Lifecycle.Event.ON_CREATE 只会被调用一次，而 Lifecycle.Event.ON_DESTROY 永远不会被调用。</li>
<li>Lifecycle.Event.ON_PAUSE 和 Lifecycle.Event.ON_STOP 的调用会有一定的延后，因为系统需要为“屏幕旋转，由于配置发生变化而导致的 Activity 重新创建” 的情况预留一些时间。</li>
</ol>
<h1 id="三-lifecycle-的另外两种写法">三、LifeCycle 的另外两种写法</h1>
<p>LifeCycle 有三种实现方法：</p>
<ol>
<li>LifecycleObserver 配合 <code>@OnLifecycleEvent</code> 注解</li>
<li>DefaultLifecycleObserver 拥有宿主所有生命周期事件</li>
<li>LifecycleEventObserver 将宿主生命周期事件封装成 Lifecycle.Event</li>
</ol>
<p>在上一节使用介绍中，我们用的是第一种方式：LifecycleObserver 配合 <code>@OnLifecycleEvent</code> 注解。</p>
<p>这种方式使用比较简单，但是注意最好添加 lifecycle-compiler 这个注解处理器，否者在运行时会使用反射的形式回调到对应的方法上：</p>
<pre><code class="language-groovy">annotationProcessor &quot;androidx.lifecycle:lifecycle-compiler:2.2.0&quot;
</code></pre>
<p>加上这个注解处理器后，用 <code>@OnLifecycleEvent</code> 标记的方法就不能再声明成 <code>private</code> ，否者会报如下的错误：</p>
<pre><code class="language-java">method marked with OnLifecycleEvent annotation can not be private
</code></pre>
<p>下面介绍一下另外两种实现方式：</p>
<h2 id="一defaultlifecycleobserver-拥有宿主所有生命周期事件">（一）DefaultLifecycleObserver 拥有宿主所有生命周期事件</h2>
<p>使用 DefaultLifecycleObserver 需要用到 <code>Java8</code>，我们首先添加依赖：</p>
<pre><code>implementation &quot;androidx.lifecycle:lifecycle-common-java8:2.2.0&quot;
</code></pre>
<p>然后在模块级别的 build.gradle 中添加：</p>
<pre><code class="language-groovy">android {
  ...
  compileOptions {
    sourceCompatibility JavaVersion.VERSION_1_8
    targetCompatibility JavaVersion.VERSION_1_8
  }
}
</code></pre>
<p>使用 lifecycle-common-java8 依赖后，就可以将 lifecycle-compiler 依赖去掉。</p>
<p>DefaultLifecycleObserver 接口中有 6 个生命周期方法：</p>
<pre><code class="language-java">public interface DefaultLifecycleObserver extends FullLifecycleObserver {

    @Override
    default void onCreate(@NonNull LifecycleOwner owner) {
    }

    @Override
    default void onStart(@NonNull LifecycleOwner owner) {
    }

    @Override
    default void onResume(@NonNull LifecycleOwner owner) {
    }

    @Override
    default void onPause(@NonNull LifecycleOwner owner) {
    }

    @Override
    default void onStop(@NonNull LifecycleOwner owner) {
    }

    @Override
    default void onDestroy(@NonNull LifecycleOwner owner) {
    }
}
</code></pre>
<p>该接口继承自 FullLifecycleObserver ，由于权限问题，我们不能直接使用 FullLifecycleObserver 来拥有宿主的所有生命周期事件。</p>
<p>所以，我们需要通过实现 DefaultLifecycleObserver 接口，然后重写自己业务需要监听的生命周期方法。</p>
<h2 id="二lifecycleeventobserver-宿主生命周期事件封装成-lifecycleevent">（二）LifecycleEventObserver 宿主生命周期事件封装成 Lifecycle.Event</h2>
<pre><code class="language-java">//通过实现 LifecycleEventObserver 接口，重写 onStateChanged 方法，在该方法内部
//通过判断 Lifecycle.Event 来实现具体的业务逻辑
public class MyVideoPlayObserver implements LifecycleEventObserver {
    private static String TAG = &quot;MyVideoPlayObserver&quot;;

    @Override
    public void onStateChanged(@NonNull LifecycleOwner source, @NonNull Lifecycle.Event event) {
        switch (event){
            case ON_CREATE:
                Log.d(TAG,&quot;initVideo&quot;);
                break;
            case ON_START:
                Log.d(TAG,&quot;startPlay&quot;);
                break;
            case ON_RESUME:
                Log.d(TAG,&quot;resumePlay&quot;);
                break;
            default:
                 break;
        }
    }
}
</code></pre>
<p>对于这三种实现方式如何选择呢？</p>
<p><strong>建议使用 DefaultLifecycleObserver 和 LifecycleEventObserver 的方式。</strong></p>
<ol>
<li>Java8 使用 DefaultLifecycleObserver 来实现 Lifecycle，Java7 使用注解的方式。如果一旦 Java8 成为 Android 的主流后，注解的方式会被弃用。</li>
<li>如果一个类同时实现了 DefaultLifecycleObserver 接口和 LifecycleEventObserver 接口，那么 DefaultLifecycleObserver 中的方法会先触发，然后才执行 LifecycleEventObserver 的  onStateChanged 方法。</li>
<li>如果一个类实现了 DefaultLifecycleObserver 接口，同时使用了 <code>@OnLifecycleEvent</code> 注解，那么注解的方式会被自动忽略掉。</li>
</ol>
<h1 id="四-总结">四、总结</h1>
<p><strong>LifeCycle 组件存在的主要意义是帮助我们解耦，让自己定义的组件也能够感受到生命周期的变化。</strong></p>
<h1 id="五-补充">五、补充</h1>
<p>截止本文发布时，lifecycle_version 最新版本是 <code>2.2.0</code>，如需获取最新版本请查看官网：</p>
<p>https://developer.android.google.cn/jetpack/androidx/releases/lifecycle</p>
<p>注：<code>lifecycle-extensions</code> 中的 API 已弃用，需要使用到 Lifecycle 下的某个工具时，添加对应的依赖即可：</p>
<pre><code class="language-groovy">    dependencies {
        def lifecycle_version = &quot;2.2.0&quot;
        def arch_version = &quot;2.1.0&quot;

        // ViewModel
        implementation &quot;androidx.lifecycle:lifecycle-viewmodel:$lifecycle_version&quot;
        // LiveData
        implementation &quot;androidx.lifecycle:lifecycle-livedata:$lifecycle_version&quot;
        // Lifecycles only (without ViewModel or LiveData)
        implementation &quot;androidx.lifecycle:lifecycle-runtime:$lifecycle_version&quot;

        // Saved state module for ViewModel
        implementation &quot;androidx.lifecycle:lifecycle-viewmodel-savedstate:$lifecycle_version&quot;

        // Annotation processor
        annotationProcessor &quot;androidx.lifecycle:lifecycle-compiler:$lifecycle_version&quot;
        // alternately - if using Java8, use the following instead of lifecycle-compiler
        implementation &quot;androidx.lifecycle:lifecycle-common-java8:$lifecycle_version&quot;

        // optional - helpers for implementing LifecycleOwner in a Service
        implementation &quot;androidx.lifecycle:lifecycle-service:$lifecycle_version&quot;

        // optional - ProcessLifecycleOwner provides a lifecycle for the whole application process
        implementation &quot;androidx.lifecycle:lifecycle-process:$lifecycle_version&quot;

        // optional - ReactiveStreams support for LiveData
        implementation &quot;androidx.lifecycle:lifecycle-reactivestreams:$lifecycle_version&quot;

        // optional - Test helpers for LiveData
        testImplementation &quot;androidx.arch.core:core-testing:$arch_version&quot;
    }
    
</code></pre>
<h1 id="六-参考资料">六、参考资料</h1>
<p><a href="https://developer.android.google.cn/jetpack">Google Jetpack 官方文档</a></p>
<p><a href="https://www.imooc.com/u/index/read">慕课专栏：跟架构师学Jetpack</a></p>
<p>《Android Jetpack 应用指南》叶坤</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Jetpack 简介]]></title>
        <id>https://yancechen.github.io/post/jetpack-jian-jie/</id>
        <link href="https://yancechen.github.io/post/jetpack-jian-jie/">
        </link>
        <updated>2020-09-16T04:55:52.000Z</updated>
        <content type="html"><![CDATA[<h1 id="一-什么是-jetpack">一、什么是 Jetpack</h1>
<p>Jetpack 是一个丰富的组件库，它的组件库按类别分为 4 类，分别是架构（Architecture）、界面（UI）、行为（behavior）和基础（foundation）。每个组件都可以单独使用，也可以配合在一起使用。每个组件都给用户提供了一个标准，能够帮助开发者遵循最佳做法，减少样板代码并编写可在各种 Android 版本和设备中一致运行的代码，让开发者能够集中精力编写重要的业务代码。</p>
<figure data-type="image" tabindex="1"><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ba3329982141490d827ea059b2100a34~tplv-k3u1fbpfcp-zoom-1.image" alt="图1" loading="lazy"></figure>
<h1 id="二-jetpack-的优势">二、Jetpack 的优势</h1>
<h2 id="一解决了-android-架构问题">（一）解决了 Android 架构问题</h2>
<p>由于之前 Google 并没有推出关于 Android 应用程序架构设计的标准，因此，很多工程师只能自己创造各种解决方案，但这些方案都普遍存在两个问题：</p>
<ul>
<li>非 Google 官方解决方案</li>
</ul>
<p>一般有经验的工程师，都会从自己做过的项目中，总结出一套自己的架构设计，并且将其应用到生产环境中，不过或多或少的都会存在一定的问题，因此需要有人一直维护和持续优化项目的架构。并且随着项目需求复杂度的增加，也面临重新设计架构的工作。</p>
<ul>
<li>无法辨别最佳的解决方案</li>
</ul>
<p>由于每个工程师的设计思路都不相同，因此，也无法确认到底谁的架构是最佳方案，最终也导致了开发出来的应用参差不齐。</p>
<p>Google 也意识到了这些问题，因此推出了 Jetpack，让开发者能够使用标准的架构组件，而不用去纠结架构的方案设计，可以将更多的精力放在自己的业务代码上。</p>
<h2 id="二提升了代码质量">（二）提升了代码质量</h2>
<p>Jetpack 拥有基于生命周期感知的能力，可以减少 NPE 崩溃、内存泄漏。为我们开发出健壮且流畅的程序提供强力保障；</p>
<h2 id="三提升了开发效率">（三）提升了开发效率</h2>
<p>Jetpack 可以减少样板代码，有助于提升 Android 开发的效率。这些组件可以单独使用，也可以组合使用，并且在不同 Android 版本中运行一致。</p>
<h1 id="三-jetpack-与-androidx">三、Jetpack 与 AndroidX</h1>
<p>Jetpack 是各种组件库的统称，AndroidX 是这些组件的统一包名。</p>
<p>AndroidX 对原始 Android Support Library 进行了重大改进，后者现在已不再维护。androidx 软件包完全取代了 support 包，不仅提供同等的功能，而且提供了新的库。Jetpack 组件中也是完全使用 androidx 开头的包名。</p>
<p>与 Support Library 一样，androidx 命名空间中的库与 Android 平台分开提供，并向后兼容各个 Android 版本。</p>
<p><strong>注意：</strong></p>
<ul>
<li>
<p>AndroidX 中的所有软件包都使用一致的命名空间，以字符串 androidx 开头。Support Library 软件包已映射到对应的 androidx.* 软件包。</p>
</li>
<li>
<p>与 Support Library 不同，androidx 软件包会单独维护和更新。从版本 1.0.0 开始，androidx 软件包使用严格的语义版本控制。可以单独更新项目中的各个 AndroidX 库。</p>
</li>
<li>
<p>版本 28.0.0 是 Support Library 的最后一个版本。以后将不再发布 android.support 库版本。所有新功能都将在 androidx 命名空间中开发。</p>
</li>
</ul>
<h1 id="四-本文参考资料">四、本文参考资料</h1>
<p><a href="https://developer.android.google.cn/jetpack">Google Jetpack 官方文档</a></p>
<p><a href="https://www.imooc.com/u/index/read">慕课专栏：跟架构师学Jetpack</a></p>
<p>《Android Jetpack 应用指南》叶坤</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Android 学习资料汇总]]></title>
        <id>https://yancechen.github.io/post/android-xue-xi-zi-liao-hui-zong/</id>
        <link href="https://yancechen.github.io/post/android-xue-xi-zi-liao-hui-zong/">
        </link>
        <updated>2020-07-09T06:38:13.000Z</updated>
        <content type="html"><![CDATA[<h3 id="一-webview">一、WebView</h3>
<p>来自 Carson_Ho 的文章</p>
<ol>
<li><a href="https://www.jianshu.com/p/d2d4f652029d">Android Hybrid开发：这是一份详细 &amp; 全面的WebView学习攻略</a></li>
<li><a href="https://www.jianshu.com/p/5e7075f4875f">Android：手把手教你构建 全面的WebView 缓存机制 &amp; 资源加载方案</a></li>
<li><a href="https://www.jianshu.com/p/345f4d8a5cfa">最全面总结 Android WebView与 JS 的交互方式</a></li>
<li><a href="https://www.jianshu.com/p/3a345d27cd42">你不知道的 Android WebView 使用漏洞</a></li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[常用网站]]></title>
        <id>https://yancechen.github.io/post/chang-yong-wang-zhan/</id>
        <link href="https://yancechen.github.io/post/chang-yong-wang-zhan/">
        </link>
        <updated>2020-06-09T03:16:39.000Z</updated>
        <summary type="html"><![CDATA[<p>常用网站梳理，方便访问</p>
]]></summary>
        <content type="html"><![CDATA[<p>常用网站梳理，方便访问</p>
<!-- more -->
<h3 id="一-github">一、github</h3>
<p>1.<a href="https://github.com/google">Google Open Source</a><br>
2.<a href="https://github.com/alibaba">Alibaba Open Source</a><br>
3.<a href="https://github.com/SmartisanTech">SmartisanTech</a><br>
4.<a href="https://github.com/Tencent">Tencent</a><br>
5.<a href="https://github.com/JakeWharton">Jake Wharton</a><br>
6.<a href="https://github.com/gradle">Gradle</a><br>
7.<a href="https://github.com/flutter">Flutter</a></p>
<h3 id="二-高质量社区和博客">二、高质量社区和博客</h3>
<p>1.<a href="https://wanandroid.com/">玩 Android</a><br>
2.<a href="https://blog.csdn.net/guolin_blog">郭霖的专栏CSDN</a><br>
3.<a href="http://liuwangshu.cn/">刘望舒的博客</a><br>
4.<a href="https://blog.csdn.net/carson_ho">carson_ho 专注分享 Android开发 干货</a></p>
<h3 id="三-flutter-学习">三、Flutter 学习</h3>
<p>1.<a href="https://flutter.cn/docs">Flutter 官方开发文档-中文版</a><br>
2.<a href="https://github.com/flutter">Flutter 的 Github</a><br>
3.<a href="https://flutterchina.club/">国内 Flutter 中文网</a><br>
4.<a href="https://pub.dev/">Flutter Pub仓库</a><br>
5.<a href="https://dartpad.cn/">Dartpad</a><br>
6.<a href="https://blog.csdn.net/mengks1987">老孟Flutter</a></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Android Studio for mac 快捷键设置]]></title>
        <id>https://yancechen.github.io/post/android-studio-for-mac-kuai-jie-jian-she-zhi/</id>
        <link href="https://yancechen.github.io/post/android-studio-for-mac-kuai-jie-jian-she-zhi/">
        </link>
        <updated>2020-06-08T06:52:51.000Z</updated>
        <content type="html"><![CDATA[<h3 id="1左键查看源码总弹出右键菜单">1.左键查看源码，总弹出右键菜单</h3>
<p>在mac中使用 Android studio，需要进入某一个类，或者查看调用的方法时，要使用ctrl＋左键来进入，但是这个又是系统右键的快捷键，所以我们需要覆盖一下快捷键的设置。</p>
<p>KeyMap 中搜索 Declaration，点击 Add Mouse Shortcut，添加 cmd+左键，即可完成覆盖，以后再也不会弹出右键的提示了。</p>
<figure data-type="image" tabindex="1"><img src="https://yancechen.github.io/post-images/1591599326422.png" alt="" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Flutter 学习资料汇总]]></title>
        <id>https://yancechen.github.io/post/flutter-xue-xi-zi-liao-hui-zong/</id>
        <link href="https://yancechen.github.io/post/flutter-xue-xi-zi-liao-hui-zong/">
        </link>
        <updated>2020-06-08T02:41:08.000Z</updated>
        <content type="html"><![CDATA[<h3 id="一-flutter-官网">一、Flutter 官网</h3>
<p><a href="https://flutter.cn/docs">Flutter 官方中文网</a></p>
<h3 id="二-入门">二、入门</h3>
<p>1.<a href="https://www.jianshu.com/p/0a19cf96dbe3">Android跨平台：请收好这份快速入门Flutter的学习指南！</a><br>
2.<a href="https://cn.udacity.com/course/build-native-mobile-apps-with-flutter--ud905">Build Native Mobile Apps with Flutter</a></p>
]]></content>
    </entry>
</feed>